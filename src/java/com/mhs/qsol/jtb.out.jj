//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
   STATIC = false;
   IGNORE_CASE = true;
   UNICODE_INPUT = true;
   OUTPUT_DIRECTORY = "queryparser";
}

PARSER_BEGIN(QueryParser)
package com.mhs.qsol.queryparser;

import java.util.Map;
import com.mhs.qsol.QsolParser.Operator;
import com.mhs.qsol.syntaxtree.*;
import java.util.Vector;


public class QueryParser 
{
   public void setOrderOfOps(Map opMap)
   {
      token_source.orderOfOps = opMap;
   }
   public void setHideOps(boolean hideOr,boolean hideAnd,boolean hideAndNot,boolean hideProximity)
   {
      token_source.hideAnd = hideAnd;
      token_source.hideOr = hideOr;
      token_source.hideAndNot = hideAndNot;
      token_source.hideProximity = hideProximity;
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(QueryParser)

TOKEN_MGR_DECLS:{
   Map orderOfOps;
   boolean hideAnd;
   boolean hideOr;
   boolean hideAndNot;
   boolean hideProximity;
}


SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

<*> TOKEN :
{
   <#ESCAPED: "\\" ["*", "?"]>
   | <#NON_ESCAPED: ~["[", "]", "(", ")", " ", "*", "?"]>
   | <#ANY_TOKEN: (<ESCAPED> | <NON_ESCAPED>)+>
}

TOKEN :
{
   <AND: "&">
      {
         if ( hideAnd )
         {
            matchedToken.kind = SEARCHTOKEN;
            matchedToken.image = "\\" + matchedToken.image;
         }
         else
         {
            matchedToken.kind = (Integer)orderOfOps.get(Operator.AND);
         }
      }
   | <OR: "|" | "||">
      {
         if ( hideOr )
         {
            matchedToken.kind = SEARCHTOKEN;
            matchedToken.image = "\\" + matchedToken.image;
         }
         else
         {
            if ( matchedToken.image.length() == 1 )
            {
               matchedToken.kind = (Integer)orderOfOps.get(Operator.OR);
            }
            else
            {
               matchedToken.kind = OP4;
            }
         }
      }
   | <ANDNOT: "!" | "!!">
      {
         if ( hideAndNot )
         {
            matchedToken.kind = SEARCHTOKEN;
            matchedToken.image = "\\" + matchedToken.image;
         }
         else
         {
            if ( matchedToken.image.length() == 1 )
            {
               matchedToken.kind = (Integer)orderOfOps.get(Operator.ANDNOT);
            }
            else
            {
               matchedToken.kind = OP4;
            }
         }
      }
   | <PROXIMITY: ("ord" | "pre")? "~" (<DIGIT>)* (["p", "s"])?>
      {
         if ( hideProximity )
         {
            matchedToken.kind = SEARCHTOKEN;
            matchedToken.image = "\\" + matchedToken.image;
         }
         else
         {
            String text = matchedToken.image;
            matchedToken.kind = (Integer)orderOfOps.get(Operator.PROXIMITY);
         }
      }
   | <MATCHALL: "*:*">
   | <QUOTED: "\"" (~["\""])+ "\"" (":" (<DIGIT>)*)?>
   | <BOOSTEDQUOTED: "\"" (~["\""])+ "\"" (":" (<DIGIT>)*)? "^" (<DIGIT>)+ ("." (<DIGIT>)+)?>
   | <FUZZY: (~["[", "]", "(", ")", " ", "`"])+ ("`")>
   | <RANGE: ((["[", "{"])? (<SEARCHTOKEN>) ((" TO ") | (" RNG ") | (" rng ")) (<SEARCHTOKEN>) (["]", "}"])?)>
   | <FIELDSTART: (~["(", ")", " "])+ "(">
      {
         String text = matchedToken.image;
         matchedToken.image = text.substring(0,text.length() - 1);
      }
   | <BOOSTEDSEARCHTOKEN: (<ANY_TOKEN>)+ "^" (<DIGIT>)+ ("." (<DIGIT>)+)?>
   | <SEARCHTOKEN: (<ANY_TOKEN>)+>
   | <WILDCARD: (<ANY_TOKEN> | ["*", "?"])+>
   | <OP1: "op1">
   | <OP2: "op2">
   | <OP3: "op3">
   | <OP4: "op4">
   | <#LETTER: ["A"-"Z", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Search Search() :
{
   CheckOrd1Search n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=CheckOrd1Search()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Search(n0,n1); }
}

CheckOrd1Search CheckOrd1Search() :
{
   CheckOrd2Search n0;
   NodeOptional n1 = new NodeOptional();
   Ord1Search n2;

   
}
{
   n0=CheckOrd2Search()
   (
      n2=Ord1Search()
      { n1.addNode(n2); }
   )?
   
   { return new CheckOrd1Search(n0,n1); }
}

Ord1Search Ord1Search() :
{
   NodeToken n0;
   Token n1;
   CheckOrd2Search n2;
   NodeOptional n3 = new NodeOptional();
   Ord1Search n4;

   
}
{
   n1=<OP1> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CheckOrd2Search()
   (
      n4=Ord1Search()
      { n3.addNode(n4); }
   )?
   
   { return new Ord1Search(n0,n2,n3); }
}

CheckOrd2Search CheckOrd2Search() :
{
   CheckOrd3Search n0;
   NodeOptional n1 = new NodeOptional();
   Ord2Search n2;

   
}
{
   n0=CheckOrd3Search()
   (
      n2=Ord2Search()
      { n1.addNode(n2); }
   )?
   
   { return new CheckOrd2Search(n0,n1); }
}

Ord2Search Ord2Search() :
{
   NodeToken n0;
   Token n1;
   CheckOrd3Search n2;
   NodeOptional n3 = new NodeOptional();
   Ord2Search n4;

   
}
{
   n1=<OP2> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CheckOrd3Search()
   (
      n4=Ord2Search()
      { n3.addNode(n4); }
   )?
   
   { return new Ord2Search(n0,n2,n3); }
}

CheckOrd3Search CheckOrd3Search() :
{
   CheckOrd4Search n0;
   NodeOptional n1 = new NodeOptional();
   Ord3Search n2;

   
}
{
   n0=CheckOrd4Search()
   (
      n2=Ord3Search()
      { n1.addNode(n2); }
   )?
   
   { return new CheckOrd3Search(n0,n1); }
}

Ord3Search Ord3Search() :
{
   NodeToken n0;
   Token n1;
   CheckOrd4Search n2;
   NodeOptional n3 = new NodeOptional();
   Ord3Search n4;

   
}
{
   n1=<OP3> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CheckOrd4Search()
   (
      n4=Ord3Search()
      { n3.addNode(n4); }
   )?
   
   { return new Ord3Search(n0,n2,n3); }
}

CheckOrd4Search CheckOrd4Search() :
{
   BasicSearch n0;
   NodeOptional n1 = new NodeOptional();
   Ord4Search n2;

   
}
{
   n0=BasicSearch()
   (
      n2=Ord4Search()
      { n1.addNode(n2); }
   )?
   
   { return new CheckOrd4Search(n0,n1); }
}

Ord4Search Ord4Search() :
{
   NodeToken n0;
   Token n1;
   BasicSearch n2;
   NodeOptional n3 = new NodeOptional();
   Ord4Search n4;

   
}
{
   n1=<OP4> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=BasicSearch()
   (
      n4=Ord4Search()
      { n3.addNode(n4); }
   )?
   
   { return new Ord4Search(n0,n2,n3); }
}

FieldSearch FieldSearch() :
{
   NodeToken n0;
   Token n1;
   CheckOrd1Search n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<FIELDSTART> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CheckOrd1Search()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new FieldSearch(n0,n2,n3); }
}

SearchToken SearchToken() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<MATCHALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QUOTED> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<BOOSTEDQUOTED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<RANGE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<WILDCARD> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<FUZZY> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<BOOSTEDSEARCHTOKEN> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<SEARCHTOKEN> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new SearchToken(n0); }
}

ParenthesisSearch ParenthesisSearch() :
{
   NodeToken n0;
   Token n1;
   CheckOrd1Search n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CheckOrd1Search()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParenthesisSearch(n0,n2,n3); }
}

BasicSearch BasicSearch() :
{
   NodeList n0 = new NodeList();
   BasicSearchType n1;

   
}
{
   (
      n1=BasicSearchType()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new BasicSearch(n0); }
}

BasicSearchType BasicSearchType() :
{
   NodeChoice n0;
   FieldSearch n1;
   SearchToken n2;
   ParenthesisSearch n3;

   
}
{
   (
      n1=FieldSearch()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SearchToken()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ParenthesisSearch()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new BasicSearchType(n0); }
}
