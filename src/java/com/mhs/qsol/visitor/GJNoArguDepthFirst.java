//
// Generated by JTB 1.3.2
//

package com.mhs.qsol.visitor;

import com.mhs.qsol.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
  //
  // Auto class visitors--probably don't need to be overridden.
  //
  public R visit(NodeList n) {
    R _ret = null;
    int _count = 0;
    for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
      e.nextElement().accept(this);
      _count++;
    }
    return _ret;
  }

  public R visit(NodeListOptional n) {
    if (n.present()) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
        e.nextElement().accept(this);
        _count++;
      }
      return _ret;
    } else
      return null;
  }

  public R visit(NodeOptional n) {
    if (n.present())
      return n.node.accept(this);
    else
      return null;
  }

  public R visit(NodeSequence n) {
    R _ret = null;
    int _count = 0;
    for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
      e.nextElement().accept(this);
      _count++;
    }
    return _ret;
  }

  public R visit(NodeToken n) {
    return null;
  }

  //
  // User-generated visitor methods below
  //

  /**
   * f0 -> CheckOrd1Search() f1 -> <EOF>
   */
  public R visit(Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return _ret;
  }

  /**
   * f0 -> CheckOrd2Search() f1 -> ( Ord1Search() )?
   */
  public R visit(CheckOrd1Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return _ret;
  }

  /**
   * f0 -> <OP1> f1 -> CheckOrd2Search() f2 -> ( Ord1Search() )?
   */
  public R visit(Ord1Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> CheckOrd3Search() f1 -> ( Ord2Search() )?
   */
  public R visit(CheckOrd2Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return _ret;
  }

  /**
   * f0 -> <OP2> f1 -> CheckOrd3Search() f2 -> ( Ord2Search() )?
   */
  public R visit(Ord2Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> CheckOrd4Search() f1 -> ( Ord3Search() )?
   */
  public R visit(CheckOrd3Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return _ret;
  }

  /**
   * f0 -> <OP3> f1 -> CheckOrd4Search() f2 -> ( Ord3Search() )?
   */
  public R visit(Ord3Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> BasicSearch() f1 -> ( Ord4Search() )?
   */
  public R visit(CheckOrd4Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return _ret;
  }

  /**
   * f0 -> <OP4> f1 -> BasicSearch() f2 -> ( Ord4Search() )?
   */
  public R visit(Ord4Search n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> <FIELDSTART> f1 -> CheckOrd1Search() f2 -> ")"
   */
  public R visit(FieldSearch n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> <MATCHALL> | <QUOTED> | <BOOSTEDQUOTED> | <RANGE> | <WILDCARD> |
   * <FUZZY> | <BOOSTEDSEARCHTOKEN> | <SEARCHTOKEN>
   */
  public R visit(SearchToken n) {
    R _ret = null;
    n.f0.accept(this);
    return _ret;
  }

  /**
   * f0 -> "(" f1 -> CheckOrd1Search() f2 -> ")"
   */
  public R visit(ParenthesisSearch n) {
    R _ret = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return _ret;
  }

  /**
   * f0 -> ( BasicSearchType() )+
   */
  public R visit(BasicSearch n) {
    R _ret = null;
    n.f0.accept(this);
    return _ret;
  }

  /**
   * f0 -> FieldSearch() | SearchToken() | ParenthesisSearch()
   */
  public R visit(BasicSearchType n) {
    R _ret = null;
    n.f0.accept(this);
    return _ret;
  }

}
